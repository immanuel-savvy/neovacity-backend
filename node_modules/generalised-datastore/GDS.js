"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _fs = _interopRequireDefault(require("fs"));

var _Folder = _interopRequireDefault(require("./Folder"));

var _GDSFile2 = _interopRequireDefault(require("./GDSFile"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var GDS = /*#__PURE__*/function (_GDSFile) {
  _inherits(GDS, _GDSFile);

  var _super = _createSuper(GDS);

  function GDS(ds_name, base_path) {
    var _this;

    _classCallCheck(this, GDS);

    _this = _super.call(this);

    _defineProperty(_assertThisInitialized(_this), "create_config", function () {
      return {
        datastore_name: _this.ds_name,
        folders: 0,
        files: 0,
        created: Date.now(),
        updated: Date.now()
      };
    });

    _defineProperty(_assertThisInitialized(_this), "sync", function (sync_handler) {
      var _this$_fs = _this._fs,
          existsSync = _this$_fs.existsSync,
          mkdirSync = _this$_fs.mkdirSync,
          writeFileSync = _this$_fs.writeFileSync,
          readFileSync = _this$_fs.readFileSync;
      if (!existsSync(_this.folders_path)) mkdirSync(_this.folders_path, {
        recursive: true
      });
      if (!existsSync(_this.files_path)) mkdirSync(_this.files_path);

      if (!existsSync(_this.ds_config_path)) {
        _this.config = _this.create_config();
        writeFileSync(_this.ds_config_path, JSON.stringify(_this.config), {
          encoding: "utf8"
        });
      } else _this.config = JSON.parse(readFileSync(_this.ds_config_path, {
        encoding: "utf8"
      }));

      _this.synced = true;

      if (sync_handler) {
        try {
          if (!Array.isArray(sync_handler)) sync_handler = new Array(sync_handler);
          sync_handler.map( /*#__PURE__*/function () {
            var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(handler) {
              return regeneratorRuntime.wrap(function _callee$(_context) {
                while (1) {
                  switch (_context.prev = _context.next) {
                    case 0:
                      _context.t0 = typeof handler === "function";

                      if (!_context.t0) {
                        _context.next = 5;
                        break;
                      }

                      _context.next = 4;
                      return handler(_assertThisInitialized(_this));

                    case 4:
                      _context.t0 = _context.sent;

                    case 5:
                      return _context.abrupt("return", _context.t0);

                    case 6:
                    case "end":
                      return _context.stop();
                  }
                }
              }, _callee);
            }));

            return function (_x) {
              return _ref.apply(this, arguments);
            };
          }());
        } catch (e) {}
      }

      return _assertThisInitialized(_this);
    });

    _defineProperty(_assertThisInitialized(_this), "folder", function (folder_name, subfolder, joins) {
      if (!_this.synced) throw new Error("Sync GDS first!");
      var folder = new _Folder["default"](folder_name, _assertThisInitialized(_this), subfolder).create(joins);

      _this.folders.push(folder);

      return folder;
    });

    _defineProperty(_assertThisInitialized(_this), "get_folder_by_id", function (folder_name) {
      return folder_name.split && _this.folders.find(function (folder) {
        return folder.folder_name === folder_name || folder.folder_name === folder_name.split("~")[0];
      });
    });

    _this.ds_name = ds_name;
    _this._path = base_path || "".concat(process.env["HOME"], "/.GDS/").concat(ds_name);
    _this.ds_config_path = _this._path + "/.config";
    _this.folders_path = "".concat(_this._path, "/folders");
    _this.files_path = "".concat(_this._path, "/files");
    _this.folders = new Array();
    _this.ds_config = new Object();
    _this._fs = _fs["default"];
    return _this;
  }

  return _createClass(GDS);
}(_GDSFile2["default"]);

var _default = GDS;
exports["default"] = _default;
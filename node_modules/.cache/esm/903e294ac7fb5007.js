let ADMISSION_EXAMS,ADMISSION_QUESTIONS,gen_random_int,admission_exam_email,send_mail,to_title;_c7f‍.x([["update_question",()=>update_question],["admission_questions",()=>admission_questions],["new_question",()=>new_question],["admission_exam",()=>admission_exam],["remove_question",()=>remove_question],["find_admission_exam",()=>find_admission_exam]]);_c7f‍.w("../ds/conn",[["ADMISSION_EXAMS",["ADMISSION_EXAMS"],function(v){ADMISSION_EXAMS=v}],["ADMISSION_QUESTIONS",["ADMISSION_QUESTIONS"],function(v){ADMISSION_QUESTIONS=v}]]);_c7f‍.w("../functions",[["gen_random_int",["gen_random_int"],function(v){gen_random_int=v}]]);_c7f‍.w("./emails",[["admission_exam_email",["admission_exam_email"],function(v){admission_exam_email=v}]]);_c7f‍.w("./users",[["send_mail",["send_mail"],function(v){send_mail=v}],["to_title",["to_title"],function(v){to_title=v}]]);




const admission_questions = (req, res) => {
  let { school, limit } = req.body;

  let pool = ADMISSION_QUESTIONS.read({ school });
  let questions = new Array();

  if (limit)
    for (let l = 0; l < limit; l++) {
      if (!pool.length) break;

      questions.push(pool.splice(gen_random_int(pool.length), 1)[0]);
    }
  else questions = pool;

  res.json({ ok: true, message: "admission questions", data: { questions } });
};

const new_question = (req, res) => {
  let question = req.body;

  let result = ADMISSION_QUESTIONS.write(question);

  res.json({
    ok: true,
    message: "question inserted",
    data: { _id: result._id, created: result.created },
  });
};

const update_question = (req, res) => {
  let question = req.body;

  let result = ADMISSION_QUESTIONS.update(
    { _id: question._id, school: question.school },
    question
  );

  res.json({
    ok: true,
    message: "question updated",
    data: { _id: result._id, created: result.created },
  });
};

const remove_question = (req, res) => {
  let { question, school } = req.body;

  ADMISSION_QUESTIONS.remove({ _id: question, school });

  res.end();
};

const admission_exam = (req, res) => {
  let payload = req.body;

  let result = ADMISSION_EXAMS.write(payload);
  payload._id = result._id;
  payload.created = result.created;

  try {
    send_mail({
      recipient: payload.email,
      recipient_name: to_title(`${payload.firstname} ${payload.lastname}`),
      sender: "signup@udaralinksapp.com",
      sender_pass: "signupudaralinks",
      sender_name: "Neovacity Africa",
      subject: `[Admissions - Neovacity Africa] Exam Details`,
      html: admission_exam_email(payload),
    });
  } catch (e) {}

  res.json({ ok: true, message: "admission exam", data: result });
};

const find_admission_exam = (req, res) => {
  let { admission_id, school, checking } = req.body;

  let exam = ADMISSION_EXAMS.readone({ admission_id, school });

  let data;
  if (exam) {
    if (!checking) data = exam;
    else {
      if (exam.used) data = { used: "Admission ID have already been used" };
      else data = { exam: exam._id };
    }
  } else data = {};

  res.json({
    ok: true,
    message: "admission exam",
    data,
  });
};










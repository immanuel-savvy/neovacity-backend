let FAQS,GLOBALS,REVIEWS,TRUSTEES,remove_image,remove_video,save_image,save_video,GLOBAL_banner_stuffs;_a80‍.x([["GLOBALS_about_statement",()=>GLOBALS_about_statement],["GLOBALS_verified_reviews",()=>GLOBALS_verified_reviews],["GLOBAL_alumni_overview",()=>GLOBAL_alumni_overview],["GLOBAL_best_instructor_stuffs",()=>GLOBAL_best_instructor_stuffs],["GLOBAL_onboarding_stuffs",()=>GLOBAL_onboarding_stuffs],["reviews",()=>reviews],["faqs",()=>faqs],["new_faq",()=>new_faq],["remove_faq",()=>remove_faq],["update_faq",()=>update_faq],["new_review",()=>new_review],["remove_review",()=>remove_review],["trusted_by",()=>trusted_by],["add_trusted_by",()=>add_trusted_by],["remove_trustee",()=>remove_trustee],["approve_review",()=>approve_review],["alumni_overview",()=>alumni_overview],["update_alumni_overview",()=>update_alumni_overview],["banner_stuffs",()=>banner_stuffs],["onboarding_stuffs",()=>onboarding_stuffs],["handle_onboarding_stuffs",()=>handle_onboarding_stuffs],["handle_best_instructors_stuffs",()=>handle_best_instructors_stuffs],["best_instructors_stuffs",()=>best_instructors_stuffs],["about_statement",()=>about_statement],["post_about_statement",()=>post_about_statement]]);_a80‍.w("../ds/conn",[["FAQS",["FAQS"],function(v){FAQS=v}],["GLOBALS",["GLOBALS"],function(v){GLOBALS=v}],["REVIEWS",["REVIEWS"],function(v){REVIEWS=v}],["TRUSTEES",["TRUSTEES"],function(v){TRUSTEES=v}]]);_a80‍.w("./courses",[["remove_image",["remove_image"],function(v){remove_image=v}],["remove_video",["remove_video"],function(v){remove_video=v}],["save_image",["save_image"],function(v){save_image=v}],["save_video",["save_video"],function(v){save_video=v}]]);_a80‍.w("./starter",[["GLOBAL_banner_stuffs",["GLOBAL_banner_stuffs"],function(v){GLOBAL_banner_stuffs=v}]]);



const GLOBAL_best_instructor_stuffs = "best_instructor_stuffs";

const GLOBAL_onboarding_stuffs = "onboarding_stuffs";

const GLOBAL_alumni_overview = "alumni_overview";

const GLOBALS_verified_reviews = "verified_reviews";

const GLOBALS_about_statement = "about_statement";

const about_statement = (req, res) => {
  let about_statement = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBALS_about_statement });

  res.json({ ok: true, message: "about statement", data: about_statement });
};

const post_about_statement = (req, res) => {
  let { text } = req.body;

  let about_statement = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBALS_about_statement });
  if (about_statement)
    _a80‍.a("GLOBALS",GLOBALS).update({ global: GLOBALS_about_statement }, { text });
  else _a80‍.a("GLOBALS",GLOBALS).write({ global: GLOBALS_about_statement, text });

  res.end();
};

const approve_review = (req, res) => {
  let { review } = req.params;

  let globals = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBALS_verified_reviews });
  if (globals)
    _a80‍.a("GLOBALS",GLOBALS).update(
      { global: GLOBALS_verified_reviews },
      { reviews: { $push: review } }
    );
  else
    _a80‍.a("GLOBALS",GLOBALS).write({
      global: GLOBALS_verified_reviews,
      review: new Array(review),
    });

  _a80‍.a("REVIEWS",REVIEWS).update(review, { verified: true });

  res.end();
};

const reviews = (req, res) => {
  let { limit, verified } = req.body;

  let reviews;
  let verified_reviews = _a80‍.a("GLOBALS",GLOBALS).readone({
    global: GLOBALS_verified_reviews,
  });

  if (!verified_reviews) reviews = new Array();
  else reviews = verified_reviews.reviews;

  reviews = _a80‍.a("REVIEWS",REVIEWS).read(verified ? reviews : null, {
    exclude: verified ? null : reviews,
    limit,
  });

  res.json({ ok: true, message: "reviews fetched", data: reviews });
};

const new_review = (req, res) => {
  let review = req.body;

  review.image = _a80‍.a("save_image",save_image)(review.image);

  let result = _a80‍.a("REVIEWS",REVIEWS).write(review);
  review._id = result._id;
  review.created = result.created;

  if (review.verified)
    if (!!_a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBALS_verified_reviews }))
      _a80‍.a("GLOBALS",GLOBALS).update(
        { global: GLOBALS_verified_reviews },
        { reviews: { $push: review._id } }
      );
    else
      _a80‍.a("GLOBALS",GLOBALS).write({
        global: GLOBALS_verified_reviews,
        reviews: new Array(review._id),
      });

  res.json({ ok: true, message: "review added", data: review });
};

const remove_review = (req, res) => {
  let { review } = req.params;

  let review_ = _a80‍.a("REVIEWS",REVIEWS).readone(review);
  if (!review_) return res.end();

  review_.image && !review_.user && _a80‍.a("remove_image",remove_image)(review_.image);
  review_.verified &&
    _a80‍.a("GLOBALS",GLOBALS).update(
      { global: GLOBALS_verified_reviews },
      { reviews: { $splice: review } }
    );

  _a80‍.a("REVIEWS",REVIEWS).remove(review);

  res.json({ ok: true, message: "review removed", data: review });
};

const trusted_by = (req, res) => {
  res.json({
    ok: true,
    message: "fetched trusted by",
    data: _a80‍.a("TRUSTEES",TRUSTEES).read(),
  });
};

const add_trusted_by = (req, res) => {
  let trustee = req.body;

  trustee.logo = _a80‍.a("save_image",save_image)(trustee.logo);
  let result = _a80‍.a("TRUSTEES",TRUSTEES).write(trustee);
  trustee._id = result._id;
  trustee.created = result.created;

  res.json({ ok: true, message: "trustee added", data: trustee });
};

const remove_trustee = (req, res) => {
  let { trustee } = req.params;

  trustee = _a80‍.a("TRUSTEES",TRUSTEES).remove(trustee);
  trustee && _a80‍.a("remove_image",remove_image)(trustee.logo);

  res.json({
    ok: true,
    message: "trustee removed",
    data: trustee ? trustee._id || trustee : "",
  });
};

const alumni_overview = (req, res) => {
  let alumni_overview_ = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBAL_alumni_overview });

  res.json({ ok: true, message: "alumni overview", data: alumni_overview_ });
};

const update_alumni_overview = (req, res) => {
  let { video, thumbnail, image_hash } = req.body;

  (video = _a80‍.a("save_video",save_video)(video)), (thumbnail = _a80‍.a("save_image",save_image)(thumbnail));

  let alumni_overview = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBAL_alumni_overview });
  alumni_overview &&
    (thumbnail.startsWith("data") && _a80‍.a("remove_image",remove_image)(alumni_overview.thumbnail),
    video.startsWith("data") && _a80‍.a("remove_video",remove_video)(alumni_overview.video));

  _a80‍.a("GLOBALS",GLOBALS).update(
    { global: GLOBAL_alumni_overview },
    {
      video,
      thumbnail,
      image_hash,
    }
  );

  res.json({
    ok: true,
    message: "alumni overview updated",
    data: { video, thumbnail },
  });
};

const banner_stuffs = (req, res) => {
  let banner_stuffs_ = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBAL_banner_stuffs });

  res.json({ ok: true, message: "banner stuffs", data: banner_stuffs_ });
};

const onboarding_stuffs = (req, res) => {
  let onboarding_stuffs_ = _a80‍.a("GLOBALS",GLOBALS).readone({
    global: GLOBAL_onboarding_stuffs,
  });

  res.json({
    ok: true,
    message: "onboarding stuffs",
    data: onboarding_stuffs_,
  });
};

const handle_onboarding_stuffs = (req, res) => {
  let { steps, image, video, image_hash } = req.body;

  let prior = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBAL_onboarding_stuffs });
  if (!!prior) {
    if (prior.image && image && image.startsWith("data"))
      _a80‍.a("remove_image",remove_image)(prior.image);
    if (prior.video && video && video.startsWith("data"))
      _a80‍.a("remove_video",remove_video)(prior.video);

    image = _a80‍.a("save_image",save_image)(image);
    video = _a80‍.a("save_image",save_image)(video);

    _a80‍.a("GLOBALS",GLOBALS).update(
      { global: GLOBAL_onboarding_stuffs },
      { image, image_hash, video, steps }
    );
  } else
    _a80‍.a("GLOBALS",GLOBALS).write({
      image: _a80‍.a("save_image",save_image)(image),
      image_hash,
      steps,
      video: _a80‍.a("save_video",save_video)(video),
      global: GLOBAL_onboarding_stuffs,
    });

  res.json({ ok: true, message: "onboarding stuffs", data: { image } });
};

const best_instructors_stuffs = (req, res) => {
  let best_instructor_stuffs_ = _a80‍.a("GLOBALS",GLOBALS).readone({
    global: GLOBAL_best_instructor_stuffs,
  });

  res.json({
    ok: true,
    message: "best instructors stuffs",
    data: best_instructor_stuffs_,
  });
};

const handle_best_instructors_stuffs = (req, res) => {
  let { bullets, heading, text, image, image_hash } = req.body;

  let prior = _a80‍.a("GLOBALS",GLOBALS).readone({ global: GLOBAL_best_instructor_stuffs });
  if (!!prior) {
    if (prior.image && image && image.startsWith("data"))
      _a80‍.a("remove_image",remove_image)(prior.image);
    if (prior.video && video && video.startsWith("data"))
      _a80‍.a("remove_video",remove_video)(prior.video);

    image = _a80‍.a("save_image",save_image)(image);
    video = _a80‍.a("save_image",save_image)(video);
    _a80‍.a("GLOBALS",GLOBALS).update(
      { global: GLOBAL_best_instructor_stuffs },
      { image, heading, text, image_hash, bullets }
    );
  } else
    _a80‍.a("GLOBALS",GLOBALS).write({
      image: _a80‍.a("save_image",save_image)(image),
      video: _a80‍.a("save_video",save_video)(video),
      image_hash,
      bullets,
      heading,
      text,
      global: GLOBAL_best_instructor_stuffs,
    });

  res.json({ ok: true, message: "onboarding stuffs", data: { image } });
};

const faqs = (req, res) => {
  let { skip, limit, total_faqs } = req.body;

  let faqs_ = _a80‍.a("FAQS",FAQS).read(null, { limit, skip });
  if (total_faqs)
    faqs_ = { faqs: faqs_, total_faqs: _a80‍.a("FAQS",FAQS).config.total_entries };

  res.json({ ok: true, message: "faqs", data: faqs_ });
};

const new_faq = (req, res) => {
  let result = _a80‍.a("FAQS",FAQS).write(req.body);

  res.json({
    ok: true,
    message: "new faq",
    data: { _id: result._id, created: result.created },
  });
};

const remove_faq = (req, res) => {
  let { faq } = req.params;

  _a80‍.a("FAQS",FAQS).remove(faq);

  res.end();
};

const update_faq = (req, res) => {
  let { _id, question, answer } = req.body;

  let result = _a80‍.a("FAQS",FAQS).update(_id, { question, answer });

  res.json({
    ok: true,
    message: "faq updated",
    data: { _id, created: result.created },
  });
};



























;_a80‍.j(["GLOBALS_about_statement","GLOBALS_verified_reviews","GLOBAL_alumni_overview","GLOBAL_best_instructor_stuffs","GLOBAL_onboarding_stuffs","reviews","faqs","new_faq","remove_faq","update_faq","new_review","remove_review","trusted_by","add_trusted_by","remove_trustee","approve_review","alumni_overview","update_alumni_overview","banner_stuffs","onboarding_stuffs","handle_onboarding_stuffs","handle_best_instructors_stuffs","best_instructors_stuffs","about_statement","post_about_statement"]);
